ASAP
===

* Allow to switch allocator easily just modifying a rax_alloc.h file.
* Change the API so that there is always the ability to return the old value
  both when adding (updating) and removing elements.
* Test the insertion of strings greater then 512 MB. Add unit test for empty
  string set/get and iteration.
* Avoid fixing the parent link if the node is the same, if this makes a speed difference because of the avoided cache miss.
* Handle OOM everywhere. Consider a define to switch checking off if it has
  a measurable performance cost.
* All the low level node management functions should be called radtreeNode...()
* Write a complete unit test, testing with gcov that coverage is 100%.
* Write a fuzzer.
* Check if reclaiming nodes from first to last child is a performance
  improvement in radtreeFree().
* Add an interator: radtreeSeek() to start the iteration at a given element
  (should support and start and stop point, inclusive and exclsive both sides,
   and should be able to see at the start or end of the range. Moreover there
   should be ways to specify first and last elements of the three).
   Iteration should work using radtreeNext() and radtreePrev() to navigate
   the tree, returing the keys and associated values.

   Example:

   raxIterator iter;
   raxSeek(&iter,"abc",3,"xyz",3,RAD_ITER_SEEK_START|RAD_ITER_SAFE);
   while(radtreeNext(iterator)) {
       printf("key: %.*s, val %p\n", (int)iter->keylen,
                                     (char*)iter->key,
                                     iter->data);
   }
   raxFreeIterator(iterator);

* Random element function: perform log(N) random steps followed by rand(log(N)) steps.
* Move test/benchmark to separated C files.

FUTURE
===

* Ability to store aux data of any size inside the node itself, instead of the
  pointer. Could be done setting a special first byte in the value section
  to represent an encoded and progressive data length. This could further
  reduce the memory needs of a radix tree to represent a string->string map.
