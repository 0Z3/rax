ASAP
===

* Change the API so that there is always the ability to return the old value
  both when adding (updating) and removing elements.
* Test the insertion of strings greater then 512 MB. Add unit test for empty
  string set/get and iteration.
* Avoid fixing the parent link if the node is the same, if this makes a speed difference because of the avoided cache miss.
* Write a complete unit test, testing with gcov that coverage is 100%.
* Improve the fuzzer so that it also deletes from the tree randomly.
* Check if reclaiming nodes from first to last child is a performance
  improvement in radtreeFree().
* Implement safe iterator by automatic re-seeking. Write tests for it.
* Random element function: perform log(N) random steps followed by rand(log(N)) steps. Extraction will be biased but may be enough for many uses.
* Move test/benchmark to separated C files.
* Consider using void* where unsigned char* is expected for keys, so that
  it is possible to use char* or unsigned char* in the API without issues.
* Test with NULL values
* Test with empty strings.
* Finish README
* Turn repository into public.

FUTURE
===

* Ability to store aux data of any size inside the node itself, instead of the
  pointer. Could be done setting a special first byte in the value section
  to represent an encoded and progressive data length. This could further
  reduce the memory needs of a radix tree to represent a string->string map.
